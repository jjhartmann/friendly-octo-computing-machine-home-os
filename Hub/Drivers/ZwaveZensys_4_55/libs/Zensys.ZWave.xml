<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zensys.ZWave</name>
    </assembly>
    <members>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.Store(System.Byte,System.Byte)">
            <summary>
            Stores a command class for a given NodeID
            </summary>
            <param name="nodeId"></param>
            <param name="cmdClass"></param>
            <returns>true if succesfull false if not</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.StoreClassIndex(System.Byte,System.Byte)">
            <summary>
            Stores a class in the index and EEPROM
            </summary>
            <param name="index"></param>
            <param name="cmdClass"></param>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.StoreNodeMaskByte(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Stores a single mask byte in external EEPROM and the RAM table
            </summary>
            <param name="nodeId">nodeId</param>
            <param name="index">index of mask</param>
            <param name="val">true if to write 1 and false to write 0</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.GetStoredMask(System.Byte)">
            <summary>
            Retrieves a stored nodemask from the EEPROM
            </summary>
            <param name="maskNo">zero based offset of mask to retrieve</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.GetStoredClassTable">
            <summary>
            Retrieves all the Stored Class table from the EEPROM
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.CmdClasses(System.Byte)">
            <summary>
            Returns an array with the supported commandclasses for this nodeID.
            </summary>
            <param name="nodeID"></param>
            <returns>an array with the supported commandclasses for a given NodeID. null if no supported classes</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.IsSupported(System.Byte,System.Byte)">
            <summary>
            Returns wheter a specific commandclass is supported or not
            </summary>
            <param name="nodeId"></param>
            <param name="cmdClass"></param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStore.CmdClassToIndex(System.Byte)">
            <summary>
            Returns Index a given commandclass is stored at
            </summary>
            <param name="cmdClass">command class to search for</param>
            <returns>index or 0xFF if not found</returns>
        </member>
        <member name="T:Zensys.ZWave.Devices.CommandClassesStoreItem">
            <summary>
            Represents a single item in a <see cref="!:ICommandClassesStore"/>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStoreItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Devices.CommandClassesStoreItem"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.CommandClassesStoreItem.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Devices.CommandClassesStoreItem"/> class.
            </summary>
            <param name="commandClass">The command class.</param>
            <param name="nodeMask">The node mask.</param>
        </member>
        <member name="P:Zensys.ZWave.Devices.CommandClassesStoreItem.CommandClass">
            <summary>
            Gets or sets the command class.
            </summary>
            <value>The command class.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.CommandClassesStoreItem.NodeMask">
            <summary>
            Gets or sets the node mask.
            </summary>
            <value>The node mask.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.DeviceLedCollection">
            <summary>
            Represents a collection of Leds in a <see cref="T:Zensys.ZWave.Devices.IDevice"/>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.DeviceLedCollection.GetByType(Zensys.ZWave.Enums.LedTypes)">
            <summary>
            Gets the item by it type(<see cref="T:Zensys.ZWave.Enums.LedTypes"/>).
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Zensys.ZWave.Devices.IBridgeController">
            <summary>
            This interface provides methods that allow the client program using Bridge Controller specific Serial API.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IController">
            <summary>
            This interface provides properties and methods that allow the client program using Controller specific Serial API.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IDevice">
            <summary>
            This interface provides methods that allow the client program using Z-Wave Device common Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.IsSupportedSerialApiCommand(System.Byte)">
            <summary>
            Determines whether if the specified command is supported.
            </summary>
            <param name="commandId">The command id.</param>
            <returns>
            	<c>true</c> if the specified command is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetSleepMode(Zensys.ZWave.Enums.SleepMode,System.Byte)">
            <summary>
            Sets the sleep mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="intEnable">The int enable.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SerialApiSetTimeouts(System.Byte,System.Byte)">
            <summary>
            Sets the timeouts.
            </summary>
            <param name="acknowledgeTimeout">The acknowledge timeout.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.IsSupportedSerialApiCommand(System.Byte,System.Boolean)">
            <summary>
            Determines whether if the specified command is supported.
            </summary>
            <param name="commandId">The command id.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns>
            	<c>true</c> if the specified command is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.Reset">
            <summary>
            Resets this node.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendData(System.Byte,System.Byte[],Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the data.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="data">The data.</param>
            <param name="txOptions">The Tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendZWaveTest(System.Byte,System.UInt16,System.Byte,System.Int32,Zensys.ZWave.Enums.TransmitOptions,System.Byte,System.Byte[])">
            <summary>
            Sends the ZWave test.
            </summary>
            <param name="testCmd">The test command.</param>
            <param name="testDelay">The test delay.</param>
            <param name="testPayloadLength">Length of the test payload.</param>
            <param name="testCount">The test count.</param>
            <param name="txOptions">The Trnsmit options.</param>
            <param name="maxLength">Max Length.</param>
            <param name="testNodeMask">The test node mask.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendDataMeta(System.Byte,System.Byte[],Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the meta data.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="data">The data.</param>
            <param name="txOptions">The tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendDataMulti(System.Collections.Generic.List{System.Byte},System.Byte[],Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the data multi.
            </summary>
            <param name="nodeList">The node list.</param>
            <param name="data">The data.</param>
            <param name="txOptions">The Tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendDataMR(System.Byte,System.Byte[],Zensys.ZWave.Enums.TransmitOptions,System.Byte[],System.Int32)">
            <summary>
            Sends the data MR.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="data">The data.</param>
            <param name="txOptions">The tx options.</param>
            <param name="route">The route.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetProgrammingMode(System.Boolean)">
            <summary>
            Sets the programming mode.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.EraseChip(System.Boolean)">
            <summary>
            Erases the chip.
            </summary>
            <param name="isAsic">if set to <c>true</c> [is asic].</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.ReadSignatureBits">
            <summary>
            Reads the signature bits.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.ReadLockBits">
            <summary>
            Reads the lock bits.
            </summary>
            <returns>Returns the ZW0x0x Lock Bits.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.WriteLockBits(System.Byte)">
            <summary>
            Writes the lock bits.
            </summary>
            <returns>Readed ZW0x0x Lock Bits</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetWriteCycleTime">
            <summary>
            Sets the default write cycle time.
            </summary>
            <returns>Returns <c>true</c>, if write thime was set succesfully, else <c>false</c>.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetWriteCycleTime(System.Single)">
            <summary>
            Sets the write cycle time.
            </summary>
            <param name="xtalFrequencyMHz">X-Tal Frequency of th Z-Wave mudule in MHz</param>
            <returns>Returns <c>true</c>, if write thime was set succesfully, else <c>false</c>.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.CalculateWriteCycle">
            <summary>
            Calculate the default write cycle time c value.
            </summary>
            <returns>Returns c - is the value set by the ‘Set Write Cycle Time’ instruction.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.CalculateWriteCycle(System.Single)">
            <summary>
            Calculate the write cycle time c value.
            </summary>
            <param name="xtalFrequencyMHz">X-Tal Frequency of th Z-Wave mudule in MHz</param>
            <returns>Returns c - is the value set by the ‘Set Write Cycle Time’ instruction.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.Open(System.String)">
            <summary>
            Opens connection with the specified port name.
            </summary>
            <param name="portName">COM port name.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.GetVersion">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.GetCapabilities">
            <summary>
            Gets the capabilities.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SerialApiInitData">
            <summary>
            Init the Serial API.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetMode(Zensys.ZWave.Enums.WorkingModes)">
            <summary>
            Sets the working mode.See <see cref="T:Zensys.ZWave.Enums.WorkingModes"/>
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetModemBits">
            <summary>
            Set the bit that identifies the Chip as a ‘Modem’ device
            </summary>
            <returns><c>true</c>, if modem bits set ok.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.ReadState">
            <summary>
            Read status from the ZW040x chip.
            </summary>
            <returns>Readed state byte</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.ReadWriteOtpStats">
            <summary>
            Read the write OTP stats from the ZW040x chip.
            </summary>
            <returns>Number of excessive writes</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetBootLoaderMode(System.Boolean)">
            <summary>
            Sets the boot loader mode.
            </summary>
            <param name="enable">if set to <c>true</c> enable.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.GetCurrentFirmwareVersion(System.Int32@,System.Int32@)">
            <summary>
            Gets the current firmware version.
            </summary>
            <param name="version">The version.</param>
            <param name="revision">The revision.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.GetRandomNumber(System.Int32)">
            <summary>
            Gets the random number.
            </summary>
            <param name="randomBytes">The 8 bytes of random numbers.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendNodeInformation(System.Byte,Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the node information.
            </summary>
            <param name="destination">The destination.</param>
            <param name="txOptions">The TransmitOptions.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetRFReceiveMode(System.Byte)">
            <summary>
            Sets the RF receive mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetLearnMode(System.Boolean)">
            <summary>
            Sets the learn mode.
            </summary>
            <param name="learnMode">if set to <c>true</c> learn mode.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetNodeInformation(System.Boolean,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sets the node information.
            </summary>
            <param name="isListening">if set to <c>true</c> node is listening.</param>
            <param name="generic">The Generic class.</param>
            <param name="specific">The Specific class.</param>
            <param name="nodeParameter">The node parameters.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SetDefault">
            <summary>
            Resets the Device.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.SendTestFrame(System.Byte,Zensys.ZWave.Enums.PowerLevels)">
            <summary>
            Sends the test frame.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="powerLevel">The power level.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.RequestNetworkUpdate">
            <summary>
            Requests the network update.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.RediscoveryNeeded(System.Byte)">
            <summary>
            This function can be used to request a controller to update the nodes neighbors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.Calibration(System.Boolean)">
            <summary>
            Start/stop calibration.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.WriteLockBit(System.Int32,System.Byte)">
            <summary>
            Write Lock Bit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDevice.ReadLockBit(System.Int32)">
            <summary>
            Read Lock Bit.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Zensys.ZWave.Devices.IDevice.ConnectionStatusChanged">
            <summary>
            Occurs when connection status changed.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandlerEvent">
            <summary>
            Occurs when ApplicationCommandHandler command received.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandler_BridgeEvent">
            <summary>
            Occurs when ApplicationCommandHandler_Bridge command received
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Id">
            <summary>
            Gets or sets the Id.
            </summary>
            <value>The Id.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.HomeId">
            <summary>
            Gets or sets the Home Id.
            </summary>
            <value>The Home Id.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.ChipType">
            <summary>
            Gets or sets the type of the chip.
            </summary>
            <value>The type of the chip.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.ChipRevision">
            <summary>
            Gets or sets the chip revision.
            </summary>
            <value>The chip revision.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.SerialApiVersion">
            <summary>
            Gets or sets the Serial API version.
            </summary>
            <value>The serial API version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.SerialPort">
            <summary>
            Gets or sets the Serial Port name.
            </summary>
            <value>The serial port.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Timer">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.IDeviceTimer"></see>.
            </summary>
            <value>The timer.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Memory">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.IDeviceMemory"></see>.
            </summary>
            <value>The memory.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Leds">
            <summary>
            Gets the <see cref="T:Zensys.ZWave.Devices.DeviceLedCollection"></see>.
            </summary>
            <value>The Device Led collection.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Flash">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.IDeviceFlash"/>.
            </summary>
            <value>The flash.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.ConnectionStatus">
            <summary>
            Gets or sets the connection status.
            </summary>
            <value>The connection status.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Version">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.VersionInfo"/>.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.IsSlaveApi">
            <summary>
            Gets or sets a value indicating whether this node has Slave API.
            </summary>
            <value>
            	<c>true</c> if this node has Slave API; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this node is virtual.
            </summary>
            <value>
            	<c>true</c> if node is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.IsFailed">
            <summary>
            Gets or sets a value indicating whether this node is failed.
            </summary>
            <value><c>true</c> if this node is failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Capability">
            <summary>
            Gets or sets the capability.
            </summary>
            <value>The capability.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Security">
            <summary>
            Gets or sets the security.
            </summary>
            <value>The security.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Reserved">
            <summary>
            Gets or sets the reserved.
            </summary>
            <value>The reserved.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Basic">
            <summary>
            Gets or sets the basic class key.
            </summary>
            <value>The basic.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Generic">
            <summary>
            Gets or sets the generic class key.
            </summary>
            <value>The generic.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.Specific">
            <summary>
            Gets or sets the specific class key.
            </summary>
            <value>The specific.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.IsListening">
            <summary>
            Gets a value indicating whether this node is in listening mode.
            </summary>
            <value>
            	<c>true</c> if this node is in listening mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.SyncCount">
            <summary>
            Gets the syncronization count.
            </summary>
            <value>The syncronization count.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.SupportedCommandClasses">
            <summary>
            Gets or sets the supported command classes array.
            </summary>
            <value>The supported command classes array.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDevice.CapabilityBitmask">
            <summary>
            Gets or sets the capability bitmask.
            </summary>
            <value>The capability bitmask.</value>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AddNodeToNetwork">
            <summary>
            Adds the node to network.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.NodeAddedProtocolDone">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AddNodeToNetwork(Zensys.ZWave.Enums.Mode)">
            <summary>
            Adds the node to network.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AddNodeToNetworkWide">
            <summary>
            Adds the node to network (wide inclusion).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.RemoveNodeFromNetwork">
            <summary>
            Removes the node from network.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.RequestNodeInfo(System.Byte)">
            <summary>
            Requests the node info.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.ControllerChange(Zensys.ZWave.Enums.ControllerChangeMode)">
            <summary>
            Changes the controller.
            </summary>
            <param name="controllerChangeMode">The controller change mode.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.StopRequest(System.Byte)">
            <summary>
            Stops the request.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetControllerCapabilities">
            <summary>
            Gets the controller capabilities.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.ReplicationSend(System.Byte,System.Byte[],Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the Replication command.
            </summary>
            <param name="destNodeID">The destination node Id.</param>
            <param name="pData">The data.</param>
            <param name="txOptions">The Tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.CreateNewPrimaryCtrl(Zensys.ZWave.Enums.CreateNewPrimaryControllerMode)">
            <summary>
            Creates the new primary Controller.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.ReplicationReceiveComplete">
            <summary>
            Sends the replication receive complete command.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AssignReturnRoute(System.Byte,System.Byte)">
            <summary>
            Assigns the return route.
            </summary>
            <param name="srcNodeId">The SRC node id.</param>
            <param name="destNodeId">The dest node id.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.DeleteReturnRoute(System.Byte)">
            <summary>
            Deletes the return route.
            </summary>
            <param name="srcNodeId">The SRC node id.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.RemoveFailedNodeID(System.Byte)">
            <summary>
            Removes the failed node Id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.IsFailedNode(System.Byte)">
            <summary>
            Determines whether the specified node is failed.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>
            	<c>true</c> if the specified node is failed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.IsPrimaryController">
            <summary>
            Determines whether Controller is primary.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.ReplaceFailedNode(System.Byte)">
            <summary>
            Replaces the failed node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetNeighborCount">
            <summary>
            Gets the neighbor count.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AreNodesNeighbours">
            <summary>
            Determines whether the nodes are neighbours.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.RequestNodeNeighborUpdate(System.Byte)">
            <summary>
            Requests the node neighbor update.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.RequestNodeNeighborUpdateMR(System.Byte,System.Byte[])">
            <summary>
            Requests the node neighbor update MR.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="nodeMask">The node mask.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetRoutingInfo(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the routing info.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="removeBad">The remove bad.</param>
            <param name="removeNonReps">The remove NonReps.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetSUCNodeID">
            <summary>
            Gets the SUC node Id.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.SetSUCNodeID(System.Byte,System.Boolean,Zensys.ZWave.Enums.TransmitOptions,System.Byte)">
            <summary>
            Sets the SUC node ID.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="sucState">if set to <c>true</c> SUC state.</param>
            <param name="txOptions">The Tx options.</param>
            <param name="capabilities">The capabilities.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.SendSUCID(System.Byte,Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the SUC node Id.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="txOptions">The tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.AssignSUCReturnRoute(System.Byte)">
            <summary>
            Assigns the SUC return route.
            </summary>
            <param name="srcNodeId">The source node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.DeleteSUCReturnRoute(System.Byte)">
            <summary>
            Deletes the SUC return route.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetProtocolInfo(System.Byte,System.Boolean)">
            <summary>
            Gets the protocol info.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="checkIfVirtual">if set to <c>true</c> check if specified Node is virtual.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.IsVirtualNode(System.Byte)">
            <summary>
            Determines whether the specified node is virtual.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>
            	<c>true</c> if the specified node is virtual; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.GetNodes">
            <summary>
            Gets the nodes collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.SetSelfAsSUC(System.Boolean,System.Byte)">
            <summary>
            Sets self as SUC.
            </summary>
            <param name="sucState">if set to <c>true</c> SUC state.</param>
            <param name="capabilities">The capabilities.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.EnableSUC(System.Boolean,System.Byte)">
            <summary>
            Enables the SUC functionality.
            </summary>
            <param name="enable">if set to <c>true</c> enable.</param>
            <param name="capabilities">The capabilities.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IController.SetRoutingInfo(System.Byte,System.Byte[])">
            <summary>
            Sets the routing info.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="nodeMask">The node mask.</param>
            <returns></returns>
        </member>
        <member name="E:Zensys.ZWave.Devices.IController.UnsolititedFrameReceived">
            <summary>
            Occurs when Unsolitited frame received.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IController.ControllerUpdated">
            <summary>
            Represents the method that will handle the controller updated event.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IController.NodeStatusChanged">
            <summary>
            Represents the method that will handle the node status changed event.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IController.FailedNodeStatusChanged">
            <summary>
            Represents the method that will handle the failed node status changed event.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.Devices.IController.LearnModeStatusChanged">
            <summary>
            Represents the method that will handle the learn mode status changed event.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.IController.SucNodeId">
            <summary>
            Gets or sets the SUC node id.
            </summary>
            <value>The suc node id.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IController.IncludedNodes">
            <summary>
            Gets or sets the collection of included nodes.
            </summary>
            <value>The included nodes.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IController.CommandClassesStore">
            <summary>
            Gets or sets the <see cref="!:ICommandClassesStore"></see>.
            </summary>
            <value>The command classes store.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IController.NetworkRole">
            <summary>
            Gets the network role.
            </summary>
            <value>The network role.</value>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.SendSlaveData(System.Byte,System.Byte,System.Byte[],Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the slave data.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="data">The data.</param>
            <param name="txOptions">The tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.SetSlaveNodeInformation(System.Byte,System.Boolean,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sets the slave node information.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="listening">if set to <c>true</c> [listening].</param>
            <param name="generic">The generic.</param>
            <param name="specific">The specific.</param>
            <param name="nodeParameter">The node parameter.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.SendSlaveNodeInformation(System.Byte,System.Byte,Zensys.ZWave.Enums.TransmitOptions)">
            <summary>
            Sends the slave node information.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="txOptions">The tx options.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.SetSlaveLearnMode(System.Byte,Zensys.ZWave.Enums.SlaveLearnMode)">
            <summary>
            Sets the slave learn mode.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="learnMode">if set to <c>true</c> [learn mode].</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.GetVirtualNodes">
            <summary>
            Gets the virtual nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IBridgeController.SetSlaveLearnModeEnableAndTx(System.Byte)">
            <summary>
            Sets the slave learn mode enable and transmit node info.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>new node id</returns>
        </member>
        <member name="T:Zensys.ZWave.Devices.IDeviceFlash">
            <summary>
            This interface provides methods that allow the client program using Z-Wave Memory Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.Erase(System.Boolean)">
            <summary>
            Erases the flash.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.Read(System.Boolean)">
            <summary>
            Reads the flash.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.ReadPage(System.Boolean,System.Int32)">
            <summary>
            Reads the <see cref="T:Zensys.ZWave.Devices.IFlashPage"/>.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.ErasePage(System.Int32)">
            <summary>
            Erases the page. This function is not aviable for ZW010x and returns failure for this chip.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.Write(System.Boolean,System.Byte[],Zensys.ZWave.Devices.IFlashSettings,System.Boolean)">
            <summary>
            Writes the flash.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="data">The data.</param>
            <param name="flashSettings">The flash settings.</param>
            <param name="verify">if set to <c>true</c> verify.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.WritePage(Zensys.ZWave.Devices.IFlashPage,System.Boolean,System.Boolean)">
            <summary>
            Writes the <see cref="T:Zensys.ZWave.Devices.IFlashPage"/>.
            </summary>
            <param name="page">The page.</param>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="verify">if set to <c>true</c> verify.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.GenerateOutput(System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates the output.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="flashDataRaw">The flash data raw.</param>
            <param name="pagesCount">The pages count.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.GetBytes">
            <summary>
            Gets the bytes buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.Compare(System.Boolean,Zensys.ZWave.Devices.IDeviceFlash,Zensys.ZWave.Devices.IFlashSettings,System.Byte[])">
            <summary>
            Compares the flash.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="flash">The flash.</param>
            <param name="flashSettings">The flash settings.</param>
            <param name="flashDataRaw">The flash data raw.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.WriteRfOptions(Zensys.ZWave.Devices.IFlashSettings)">
            <summary>
            Writes the RF options.
            </summary>
            <param name="flashSettings">The flash settings.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.ReadRfOptions">
            <summary>
            Reads the RF options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.RunCRCCheck">
            <summary>
            Runs CRC check in 500 series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceFlash.CheckState">
            <summary>
            Runs CheckState in 500 series.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Zensys.ZWave.Devices.IDeviceFlash.ProgressChanged">
            <summary>
            Occurs when progress changed.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceFlash.Pages">
            <summary>
            Gets or sets the pages collection.
            </summary>
            <value>The pages.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceFlash.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceFlash.FlashSize">
            <summary>
            Gets the size of the flash.
            </summary>
            <value>The size of the flash.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.IDeviceLed">
            <summary>
            This interface provides methods that allow the client program using Device Led.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceLed.SetState(System.Boolean)">
            <summary>
            Sets the state.
            </summary>
            <param name="state">if set to <c>true</c> State.</param>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceLed.Type">
            <summary>
            Gets or sets the type. See <see cref="T:Zensys.ZWave.Enums.LedTypes"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.IDeviceMemory">
            <summary>
            This interface provides properties and methods that allow the client program using EEPROM Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.GetId">
            <summary>
            Gets the node Id.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.GetByte(System.UInt32)">
            <summary>
            Gets the byte.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.PutByte(System.UInt32,System.Byte)">
            <summary>
            Puts the byte.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.GetBuffer(System.UInt32,System.Byte)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.PutBuffer(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Puts the buffer.
            </summary>
            <param name="offset">The offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.SwitchEEPROM(System.Boolean)">
            <summary>
            Switches the EEPROM.
            </summary>
            <param name="state">if set to <c>true</c> State.</param>
            <returns>External NVM chip type</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ClearEEPROM(System.Byte[])">
            <summary>
            Clears the EEPROM.
            </summary>
            <param name="eepromDataRaw">The EEPROM empty data raw.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadEEPROM">
            <summary>
            Reads the EEPROM.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteEEPROM(System.Int32,System.Byte[],System.UInt16)">
            <summary>
            Writes the EEPROM.
            </summary>
            <param name="startAddress">The start address.</param>
            <param name="eepromDataRaw">The eeprom data raw.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteEEPROM(System.Byte[])">
            <summary>
            Writes the EEPROM.
            </summary>
            <param name="eepromDataRaw">The eeprom data raw.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadHomeId">
            <summary>
            Reads the home id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteHomeId(System.Byte[])">
            <summary>
            Writes the home id.
            </summary>
            <param name="homeId">The home id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.Compare(System.Byte[])">
            <summary>
            Compares the EEPROM.
            </summary>
            <param name="eepromEmptyDataRaw">The eeprom empty data raw.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteSRAM(System.Byte[],System.Boolean)">
            <summary>
            Writes the SRAM.
            </summary>
            <param name="sramDataRaw">The sram data raw.</param>
            <param name="verify">if set to <c>true</c> [verify].</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadSRAM">
            <summary>
            Reads the SRAM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadSRAMPage(System.Int32)">
            <summary>
            Reads the SRAM page.
            </summary>
            <param name="pageIndex">The page Index.</param>
            <returns>The page buffer </returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteSRAMRfOptions(Zensys.ZWave.Devices.IFlashSettings)">
            <summary>
            Writes the SRAM RF options.
            </summary>
            <param name="rfSettings">The RF settings.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadSRAMRfOptions">
            <summary>
            Reads the SRAM RF options.
            </summary>
            <returns>The RF settings.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.SwitchMTP(System.Boolean)">
            <summary>
            Switches the MTP Interface.
            </summary>
            <param name="state">If set to <c>true</c> - activate MTP Interface. If set to <c>false</c> - deactivate MTP Interface.</param>
            <returns><c>true</c> if operation completed successfuly</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.FillMTP(System.Byte)">
            <summary>
            Fill the entire MTP Memory with specified value (Clear MTP).
            </summary>
            <param name="fillValue">The value, which will be written to each byte of the MTP Memory.</param>
            <returns><c>true</c> if operation completed successfuly</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.ReadMTP">
            <summary>
            Reads the MTP.
            </summary>
            <returns><c>true</c> if operation completed successfuly</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceMemory.WriteMTP(System.Byte[],System.Boolean)">
            <summary>
            Writes the MTP.
            </summary>
            <param name="mtpDataRaw">The MTP Memory data raw.</param>
            <param name="verify">if set to <c>true</c> [verify].</param>
            <returns><c>true</c> if operation completed successfuly</returns>
        </member>
        <member name="E:Zensys.ZWave.Devices.IDeviceMemory.ProgressChanged">
            <summary>
            Occurs when progress changed.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceMemory.Device">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.IDevice"/>.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceMemory.Buffer">
            <summary>
            Gets or sets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceMemory.EepromSize">
            <summary>
            Gets the size of the EEPROM.
            </summary>
            <value>The size of the eeprom.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceMemory.SramSize">
            <summary>
            Gets the size of the SRAM.
            </summary>
            <value>The size of the sram.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IDeviceMemory.MtpSize">
            <summary>
            Gets the size of the MTP.
            </summary>
            <value>The size of the MTP Memory.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.IDeviceTimer">
            <summary>
            This interface provides methods that allow the client program using Timer Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceTimer.Restart">
            <summary>
            Restarts the timer.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IDeviceTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IEnhancedSlave">
            <summary>
            This interface provides methods that allow the client program using Enhanced Slave Serial API.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.ISlave">
            <summary>
            This interface provides methods that allow the client program using Slave specific Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.ISlave.Support9600Only">
            <summary>
            Supports only 9,6 kbit/s.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IEnhancedSlave.RequestNewRouteDestinations">
            <summary>
            Requests the new route destinations.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IEnhancedSlave.IsNodeWithinDirectRange">
            <summary>
            Determines whether is node within direct range.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IFlashPage">
            <summary>
            This interface provides properties and methods that allow the client program using Flash Pages <see cref="T:Zensys.ZWave.Devices.IDeviceFlash"></see>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IFlashPage.Write(System.Boolean,System.Boolean)">
            <summary>
            Writes the page.
            </summary>
            <param name="isAsic">if set to <c>true</c> is Asic.</param>
            <param name="verify">if set to <c>true</c> verify.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IFlashPage.Compare(Zensys.ZWave.Devices.IFlashPage,System.Boolean)">
            <summary>
            Compares the specified page.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashPage.Flash">
            <summary>
            Gets or sets the <see cref="T:Zensys.ZWave.Devices.IDeviceFlash"/>.
            </summary>
            <value>The flash.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashPage.Buffer">
            <summary>
            Gets or sets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashPage.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.IFlashSettings">
            <summary>
            This interface provides properties that allow the client program using Flash Settings.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IFlashSettings.ParseBuffer(System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Parse the memory buffer and store settings from it to this class.
            </summary>
            <param name="chipType">Chip type.</param>
            <param name="bufferAddress">Absulute address of the memory, stored in buffer.</param>
            <param name="buffer">Buffer with memory data.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.IFlashSettings.StoreToBuffer(System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Store settings this class to the memory buffer.
            </summary>
            <param name="chipType">Chip type.</param>
            <param name="bufferAddress">Absulute address of the memory, stored in buffer.</param>
            <param name="buffer">Buffer with memory data.</param>
            <returns>None.</returns>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>The frequency.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsFrequencySet">
            <summary>
            Gets or sets the IsFrequencySet.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.NormalPower">
            <summary>
            Gets or sets the normal power.
            </summary>
            <value>The normal power.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.NormalPowerCh0">
            <summary>
            Gets or sets the normal power for channel 0.
            </summary>
            <value>The normal power for channel 0.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.NormalPowerCh1">
            <summary>
            Gets or sets the normal power for channel 1.
            </summary>
            <value>The normal power for channel 1.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.NormalPowerCh2">
            <summary>
            Gets or sets the normal power for channel 2.
            </summary>
            <value>The normal power for channel 2.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsNormalPowerSet">
            <summary>
            Gets or sets the IsNormalPowerSet.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsNormalPowerSetCh0">
            <summary>
            Gets or sets the IsNormalPowerSet for channel 0.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsNormalPowerSetCh1">
            <summary>
            Gets or sets the IsNormalPowerSet for channel 1.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsNormalPowerSetCh2">
            <summary>
            Gets or sets the IsNormalPowerSet for channel 2.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.LowPower">
            <summary>
            Gets or sets the low power.
            </summary>
            <value>The low power.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.LowPowerCh0">
            <summary>
            Gets or sets the low power for channel 0.
            </summary>
            <value>The low power for channel 0.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.LowPowerCh1">
            <summary>
            Gets or sets the low power for channel 1.
            </summary>
            <value>The low power for channel 1.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.LowPowerCh2">
            <summary>
            Gets or sets the low power for channel 2.
            </summary>
            <value>The low power for channel 2.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsLowPowerSet">
            <summary>
            Gets or sets the IsLowPowerSet.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsLowPowerSetCh0">
            <summary>
            Gets or sets the IsLowPowerSet for channel 0.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsLowPowerSetCh1">
            <summary>
            Gets or sets the IsLowPowerSet for channel 1.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsLowPowerSetCh2">
            <summary>
            Gets or sets the IsLowPowerSet for channel 2.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.RxMatch">
            <summary>
            Gets or sets the Rx match.
            </summary>
            <value>The Rx match.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsRxMatchSet">
            <summary>
            Gets or sets the IsRxMatchSet.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.TxMatch">
            <summary>
            Gets or sets the Tx match.
            </summary>
            <value>The Tx match.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.IsTxMatchSet">
            <summary>
            Gets or sets the IsTxMatchSet.
            </summary>
            <value><c>true</c> or <c>false</c></value>
        </member>
        <member name="P:Zensys.ZWave.Devices.IFlashSettings.CalibrationValue">
            <summary>
            Gets or sets the Calibration Value.
            </summary>
            <value>The Calibration Value</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.IInstallerController">
            <summary>
            This interface provides methods that allow the client program using Installer Controller specific Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IInstallerController.TransmitCount">
            <summary>
            Gets the transmit count.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IInstallerController.StoreNodeInfo(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Stores the node info.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IInstallerController.StoreHomeID(System.Byte[],System.Byte)">
            <summary>
            Stores the home ID.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IRoutingSlave">
            <summary>
            This interface provides methods that allow the client program using Routing Slave specific Serial API.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IStaticUpdateController">
            <summary>
            This interface provides methods that allow the client program using Static Update Controller (SUC)  specific Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IStaticUpdateController.EnableSUC">
            <summary>
            Enables the SUC.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IStaticUpdateController.CreateNewPrimaryController">
            <summary>
            Creates the new primary controller.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.IZensorNetRoutingSlave">
            <summary>
            This interface provides methods that allow the client program using Zensor Net Routing Slave specific Serial API.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IZensorNetRoutingSlave.ZensorNetBind">
            <summary>
            Binds the ZensorNet.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IZensorNetRoutingSlave.ZensorSendDataFlood">
            <summary>
            Sends the Zensor data flood.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.IZensorNetRoutingSlave.ZensorGetID">
            <summary>
            Gets the Zensor Id.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.MemoryLayout">
            <summary>
            Represends the <see cref="T:Zensys.ZWave.Devices.IDevice"/> Memory Layout.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_MAGIC_VALUE">
            <summary>
            RF_MAGIC_VALUE for table to be valid.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.APP_DEFAULT_FREQ">
            <summary>
            Default Frequency - use default defined in Z-WAVE lib */
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.APP_DEFAULT_NORM_POWER">
            <summary>
            Default Normal Power - Use default defined in Z-WAVE lib
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.APP_DEFAULT_LOW_POWER">
            <summary>
            Default Low Power - Use default defined in Z-WAVE lib
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.APP_DEFAULT_RX_MATCH">
            <summary>
            Default RX_MACTH - Use default defined in Z-WAVE lib
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.APP_DEFAULT_TX_MACTH">
            <summary>
            Default TX_MACTH - Use default defined in Z-WAVE lib
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_DEFAULT">
            <summary>
            Default frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_EU">
            <summary>
            EU frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_US">
            <summary>
            US frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_ANZ">
            <summary>
            ANZ frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_HK">
            <summary>
            HK frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_866">
            <summary>
            866.42 frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_870">
            <summary>
            870.42 frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_906">
            <summary>
            906.42 frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_910">
            <summary>
            910.42 frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_MY">
            <summary>
            MY frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_IN">
            <summary>
            IN frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_RU">
            <summary>
            RU frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.RF_IL">
            <summary>
            IL frequency.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FrequencyTable">
            <summary>
            Frequency table.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.PowerTable">
            <summary>
            Power table.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.MemoryLayout.EepromLayout">
            <summary>
            EEPROM Layout enumeration
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.EepromLayout.DUMMY">
            <summary>
            DUMMY.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.EepromLayout.HOMEID_LOC">
            <summary>
            Home Id location.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.MemoryLayout.FlashLayout">
            <summary>
            Flash Layout enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_TABLE_OFFSET">
            <summary>
            Flash application settings table offset for ZW010x, ZW020x, ZW030x.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_TABLE_OFFSET_ZW040X">
            <summary>
            Flash application settings table offset for ZW040x.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_MAGIC_VALUE_OFFS">
            <summary>
            Must contain RF_MAGIC_VALUE for table to be valid.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_FREQ_OFFS">
            <summary>
            Flash application settings frequency offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_NORM_OFFS">
            <summary>
            Flash application settings normal power offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_LOW_OFFS">
            <summary>
            Flash application settings low power offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_NORM_POWER_OFFS_0">
             <summary>
            0xFFB2h - FLASH_APPL_NORM_POWER_OFFS_0 Normal power for channel 0
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_NORM_POWER_OFFS_1">
             <summary>
            0xFFB3h - FLASH_APPL_NORM_POWER_OFFS_1 Normal power for channel 1
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_NORM_POWER_OFFS_2">
             <summary>
            0xFFB4h - FLASH_APPL_NORM_POWER_OFFS_2 Normal power for channel 2
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_LOW_POWER_OFFS_0">
             <summary>
            0xFFB5h - FLASH_APPL_LOW_POWER_OFFS_0 Low power for channel 0
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_LOW_POWER_OFFS_1">
             <summary>
            0xFFB6h - FLASH_APPL_LOW_POWER_OFFS_1 Low power for channel 1
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_LOW_POWER_OFFS_2">
             <summary>
            0xFFB7h - FLASH_APPL_LOW_POWER_OFFS_2 Low power for channel 2
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_RX_MATCH_OFFS">
            <summary>
            Flash application settings Rx match offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_APPL_TX_MACTH_OFFS">
            <summary>
            Flash application settings Tx match offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_RF_TABLE_OFFSET">
            <summary>
            Flash RF table offset for ZW010x, ZW020x, ZW030x.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_RF_TABLE_NORM_PWR_OFFS">
            <summary>
            Flash RF table normal power offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_RF_TABLE_LOW_PWR_OFFS">
            <summary>
            Flash RF table low power offset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Devices.MemoryLayout.FlashLayout.FLASH_RF_TABLE_FREQ_OFFS">
            <summary>
            Flash RF table frequency offset.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Devices.NodeBitmask">
            <summary>
            NodeMask handling class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Devices.NodeBitmask"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.#ctor(System.Byte)">
            <summary>
            Creates a NodeBitmask object.
            </summary>
            <param name="length">length of nodemask (number of ids/8)</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.Get">
            <summary>
            Gets the nodemask as an bit array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.Get(System.Byte)">
            <summary>
            Returns the bitMask for the given Node Id.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.Store(System.Byte[])">
            <summary>
            Stores an entire array.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.ZWaveNodeMaskSetBit(System.Byte)">
            <summary>
            Set the bit corresponding to the Node Id supplied.
            </summary>
            <param name="nodeId"></param>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.ZWaveNodeMaskClearBit(System.Byte)">
            <summary>
            Clears the bit corresponding to then Node Id supplied.
            </summary>
            <param name="nodeId"></param>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.ZWaveNodeMaskNodeIn(System.Byte)">
            <summary>
            Checks if the bit corresponding to the Node Id is set.
            </summary>
            <param name="nodeId"></param>
            <returns>true if bit is set</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.ZWaveNodeMaskBitsIn">
            <summary>
            Returns true if any bits in mask.
            </summary>
            <returns>true if bits set, false if not</returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeBitmask.ZWaveNodeMaskClear">
            <summary>
            Clears the nodemask.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.NodeBitmask.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Zensys.ZWave.Devices.NodeMask">
            <summary>
            NodeMask handling class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeMask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Devices.NodeMask"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeMask.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Devices.NodeMask"/> class.
            </summary>
            <param name="_nodeMask">The node mask.</param>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeMask.Clear">
            <summary>
            Clears the data.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeMask.Get(System.Int32)">
            <summary>
            Gets the mask by specified Node Id.
            </summary>
            <param name="nodeId">The Node Id.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.Devices.NodeMask.Set(System.Int32,System.Boolean)">
            <summary>
            Sets the mask by specified node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="value">if set to <c>true</c> mask value.</param>
            <returns></returns>
        </member>
        <member name="T:Zensys.ZWave.Devices.VersionInfo">
            <summary>
            Representd a properties of <see cref="T:Zensys.ZWave.Devices.IDevice"></see> version.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.Library">
            <summary>
            Gets or sets the library.
            </summary>
            <value>The library.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.ZWaveProtocolVersion">
            <summary>
            Gets or sets the Z-Wave protocol version.
            </summary>
            <value>The Z-Wave protocol version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.ZWaveProtocolSubVersion">
            <summary>
            Gets or sets the Z-Wave protocol sub version.
            </summary>
            <value>The Z-Wave protocol sub version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.ZWaveApplicationVersion">
            <summary>
            Gets or sets the Z-Wave application version.
            </summary>
            <value>The Z-Wave application version.</value>
        </member>
        <member name="P:Zensys.ZWave.Devices.VersionInfo.ZWaveApplicationSubVersion">
            <summary>
            Gets or sets the Z-Wave application sub version.
            </summary>
            <value>The Z-Wave application sub version.</value>
        </member>
        <member name="T:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses">
            <summary>
            Application Controller Update Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.SUC_ID">
            <summary>
            SUC Id updated.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.DELETE_DONE">
            <summary>
            Delete done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.ADD_DONE">
            <summary>
            Add done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.ROUTING_PENDING">
            <summary>
            Routing pending.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.NODE_INFO_REQ_FAILED">
            <summary>
            Node info request failed.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.NODE_INFO_REQ_DONE">
            <summary>
            Node info request done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses.NODE_INFO_RECEIVED">
            <summary>
            Node info received.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ChipTypes">
            <summary>
            Chip Types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.ZW010x">
            <summary>
            ZW010x chipt type (100 series).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.ZW020x">
            <summary>
            ZW020x chipt type (200 series).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.ZW030x">
            <summary>
            ZW030x chipt type (300 series).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.ZW040x">
            <summary>
            ZW040x chipt type (400 series).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ChipTypes.ZW050x">
            <summary>
            ZW050x chipt type (500 series).
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.NVMTypes">
            <summary>
            External Non-Volatile Memory (NVM) chip types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMTypeMask">
            <summary>
            Bus and protocol type mask.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMTypePos">
            <summary>
            Bus and protocol type bits position.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMManufacturerMask">
            <summary>
            Chip Manufacturer ID mask. 0x00 - unknown manufacturer id.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMManufacturerPos">
            <summary>
            Chip Manufacturer ID bits position.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMDeviceMask">
            <summary>
            Chip Device ID mask. 0x00 - unknown device id.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMDevicePos">
            <summary>
            Chip Device ID bits position.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMSizeMask">
            <summary>
            Chip Memory size mask. Memory size = num * NVMSizeUnit KBytes. 0x00 - unknown size.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMSizePos">
            <summary>
            Chip Memory size bits position.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMSizeUnit">
            <summary>
            Chip Memory size unit in kilo bytes (KB).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMInvalid">
            <summary>
            Invalid, cant detect, error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMUnknown">
            <summary>
            No errors, but chip type is unknown at this stage.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMSerialEEPROM">
            <summary>
            Serial EEPROM chip with SPI bus protocol like in Atmel AT25128 serial EEPROM and compatible (ST95128, etc.).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMSerialFlash">
            <summary>
            Serial Flash chip on SPI bus.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMNumonyxM25PE10">
            <summary>
            Numonyx M25PE10
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMNumonyxM25PE20">
            <summary>
            Numonyx M25PE20
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NVMTypes.NVMNumonyxM25PE40">
            <summary>
            Numonyx M25PE40
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.TransmitOptions">
            <summary>
            Transmit Options enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionNone">
            <summary>
            No Request.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionAcknowledge">
            <summary>
            Request acknowledge from destination node.
            </summary>  
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionAutoRoute">
            <summary>
            Request retransmission via repeater nodes (at normal output power level).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionLowPower">
            <summary>
            Request with low power option.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionNoRoute">
            <summary>
            Request with no route option.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionExplore">
            <summary>
            Request Explore Frame route resolution if all else fails
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitOptions.TransmitOptionNoRetransmit">
            <summary>
            Request without retransmission. Is used for ERTT 
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.CreateNewPrimaryControllerMode">
            <summary>
            Modes available for Create new primary ctrl.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CreateNewPrimaryControllerMode.Start">
            <summary>
            Start Change
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CreateNewPrimaryControllerMode.Stop">
            <summary>
            Stop Change
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CreateNewPrimaryControllerMode.StopFailed">
            <summary>
            Stop Change. Indicate failed
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.FailedNodeStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.NodeOk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.FailedNodeRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.FailedNodeNotRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.FailedNodeReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.FailedNodeReplaceDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FailedNodeStatus.FailedNodeReplaceFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.HeaderTypes.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.HeaderTypes.StartOfFrame">
            <summary>
            HEADER_SOF
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.HeaderTypes.Acknowledge">
            <summary>
            HEADER_ACK
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.HeaderTypes.NotAcknowledged">
            <summary>
            HEADER_NAK
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.HeaderTypes.Can">
            <summary>
            HEADER_CAN
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.RequestNeighborUpdateStatuses">
            <summary>
            Request Neighbor Update Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNeighborUpdateStatuses.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNeighborUpdateStatuses.RequestNeighborUpdateStarted">
            <summary>
            Started.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNeighborUpdateStatuses.RequestNeighborUpdateDone">
            <summary>
            Done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNeighborUpdateStatuses.RequestNeighborUpdateFailed">
            <summary>
            Failed.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.CommandTypes">
            <summary>
            Command Types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiGetInitData">
            <summary>
            Command to initialize Zerial API data.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiApplNodeInformation">
            <summary>
            Command to generate the Node Information frame and to save information about Node capabilities.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdApplicationCommandHandler">
            <summary>
            Command to handle Z-Wave protocol ApplicationCommandHandler function.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetControllerCapabilities">
            <summary>
            Command to get bitmask containing the capabilities of the controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiSetTimeouts">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiGetCapabilities">
            <summary>
            Command to get Serial API capabilities.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiSoftReset">
            <summary>
            Command to make the Z-Wave module do a software reset.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetRFReceiveMode">
            <summary>
            Command to power down the RF when not in use e.g. expects nothing to be received.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetSleepMode">
            <summary>
            Command to set the Z-Wave module's CPU in sleep mode until woken by an interrupt.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendNodeInformation">
            <summary>
            Command to create and transmit a "Node Information" frame.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendData">
            <summary>
            Command to transmit the data buffer to a single Z-Wave Node or all Z-Wave Nodes (broadcast).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendData_Bridge">
            <summary>
            Command to transmit the data buffer to a single Z-Wave Node or all Z-Wave Nodes (broadcast).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMulti">
            <summary>
            Command to transmit the data buffer to a list of Z-Wave Nodes (multicast frame).
            <br/>NOTE: This function is implemented in Z-Wave Controller APIs, Z-Wave Routing Slave API and Z-Wave Enhanced Slave API only.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMulti_Bridge">
            <summary>
            Command to transmit the data buffer to a list of Z-Wave Nodes (multicast frame).
            <br/>NOTE: This function is implemented in Z-Wave Controller APIs, Z-Wave Routing Slave API and Z-Wave Enhanced Slave API only.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetVersion">
            <summary>
            Command to get the Z-Wave basis API library version.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataAbort">
            <summary>
            Command to abort the ongoing transmit started with <see cref="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendData"/> or <see cref="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMulti"/>.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRFPowerLevelSet">
            <summary>
            Command to set the power level used in RF transmitting.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMeta">
            <summary>
            Command to transmit streaming or bulk data in the Z-Wave network.
            <br/>NOTE: This function is only available in Z-Wave 0201 libraries.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMeta_Bridge">
            <summary>
            Command to transmit streaming or bulk data in the Z-Wave network.
            <br/>NOTE: This function is only available in Z-Wave 0201 libraries.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMR">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataMetaMR">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetRoutingInfo">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendTestFrame">
            <summary>
            Send Test Frame Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdMemoryGetId">
            <summary>
            Command to copy the Home Id and Node Id from the non-volatile memory to the specified RAM addresses.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdMemoryGetByte">
            <summary>
            Command to read one byte from the non-volatile memory.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdMemoryPutByte">
            <summary>
            Command to write one byte to the application area of the non-volatile memory.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdMemoryGetBuffer">
            <summary>
            Command to read a number of bytes from the application area of the EEPROM to a RAM buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdMemoryPutBuffer">
            <summary>
            Command to write a number of bytes from the application area of the EEPROM to a RAM buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdClockSet">
            <summary>
            Command to write the specified time to the current Real Time Clock.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdClockGet">
            <summary>
            Command to copy the current Real Time Clock time to the specified time buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdClockCompare">
            <summary>
            Command to compare a specified time against the current Real Time Clock time.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdRtcTimerCreate">
            <summary>
            Command to create a new timer element.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdRtcTimerRead">
            <summary>
            Command to Search in the RTC list and if a used element found, copy the timer element from the RTC timer list to the specified memory buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdRtcTimerDelete">
            <summary>
            Command to remove the specified timer element from the RTC timer list.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdRtcTimerCall">
            <summary>
            Commad to execute callback function if it specified in <see cref="F:Zensys.ZWave.Enums.CommandTypes.CmdRtcTimerCreate"/>.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetNodeProtocolInfo">
            <summary>
            Command to get the Node Information frame without command classes from the EEPROM memory.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetDefault">
            <summary>
            Command to remove all Nodes, routing information, assigned homeID/nodeID and RTC timers from the EEPROM memory. This function set the Controller back to the factory default state.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveReplicationCommandComplete">
            <summary>
            Command to send command completed to sending controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveReplicationSendData">
            <summary>
            Command to send the payload and expects the receiver to respond with a command complete message.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveAssignReturnRoute">
            <summary>
            Command to assign static return routes (up to 4) to a Routing Slave node or Enhanced Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveDeleteReturnRoute">
            <summary>
            Command to delete all static return routes from a Routing Slave node or Enhanced Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRequestNodeNeighborUpdate">
            <summary>
            Command to get the neighbors from the specified node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdApplicationControllerUpdate">
            <summary>
            Command to handle "Node Information" frame. See <see cref="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendNodeInformation"/>.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveAddNodeToNetwork">
            <summary>
            Command to add any nodes to the Z-Wave network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRemoveNodeFromNetwork">
            <summary>
            Command to remove any nodes to the Z-Wave network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveCreateNewPrimary">
            <summary>
            Command to add a controller to the Z-Wave network as a replacement for the old primary controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveControllerChange">
            <summary>
            Command to add a controller to the Z-Wave network and transfer the role as primary controller to it.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRequestNodeNeighborUpdateMR">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveAssignReturnRouteMR">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetLearnMode">
            <summary>
            Command to instruct the controller to allow it to be added or removed from the network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveAssignSucReturnRoute">
            <summary>
            Command to assign the return routes of the SUC node from a Routing Slave node or Enhanced Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveEnableSuc">
            <summary>
            Command to enable/disable assignment of the SUC/SIS functionality in the controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRequestNetworkUpdate">
            <summary>
            Command to request network topology updates from the SUC/SIS node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetSucNodeId">
            <summary>
            Command to configure a static/bridge controller to be a SUC/SIS node or not.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveDeleteSucReturnRoute">
            <summary>
            Command to delete the return routes of the SUC node from a Routing Slave node or Enhanced Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetSucNodeId">
            <summary>
            Command to get the currently registered SUC node ID.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendSucId">
            <summary>
            Command to transmit SUC node Id from a primary controller or static controller to the controller node Id specified.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveAssignSucReturnRouteMR">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRediscoveryNeeded">
            <summary>
            Command to handle rediscovery needed call.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRequestNodeInfo">
            <summary>
            Command to request the node information frame from a controller based node in the network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveRemoveFailedNodeId">
            <summary>
            Command to remove a non-responding node from the routing table in the requesting controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveIsFailedNode">
            <summary>
            Command to test if a node ID is stored in the failed node ID list.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveReplaceFailedNode">
            <summary>
            Command to replace a non-responding node with a new one in the requesting controller.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdTimerStart">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdTimerRestart">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdTimerCancel">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdTimerCall">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdGetRoutingTableLine">
            <summary>
            Command to read out neighbor information from the protocol.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdGetTXCounter">
            <summary>
            Command to get a variable that returns the number of transmits that the protocol has done since last reset of the variable.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdResetTXCounter">
            <summary>
            Command to reset a variable that returns the number of transmits 
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdStoreNodeInfo">
            <summary>
            Command to restore protocol node information from a backup or the like.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdStoreHomeId">
            <summary>
            Command to restore HomeID and NodeID information from a backup.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdLockRouteResponse">
            <summary>
            Command to assure that the response route don’t disappear when transmitting a sequence of frames to the same node Id.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendDataRouteDemo">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiTest">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdSerialApiSlaveNodeInfo">
            <summary>
            Command to request application Virtual Slave Node information.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdApplicationSlaveCommandHandler">
            <summary>
            Command to handle Z-Wave protocol ApplicationSlaveCommandHandler function.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendSlaveNodeInfo">
            <summary>
            Command to create and transmit a Virtual Slave node "Node Information" frame from source Virtual Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSendSlaveData">
            <summary>
            Command to transmit the data buffer to a single Z-Wave Node or all Z-Wave Nodes (NODE_BROADCAST) from the Virtual Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetSlaveLearnMode">
            <summary>
            Command to enables the possibility for enabling or disabling “Slave Learn Mode”, which when enabled makes it possible for other controllers (primary or inclusion controllers) to add or remove a Virtual Slave Node to the Z-Wave network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetVirtualNodes">
            <summary>
            Command to request a buffer containing available Virtual Slave nodes in the Z-Wave network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveIsVirtualNode">
            <summary>
            Command to check if node is a Virtual Slave node.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveReservedSSD">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdApplicationCommandHandler_Bridge">
            <summary>
            Command to handle Z-Wave protocol ApplicationCommandHandler_Bridge function.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveGetRandom">
            <summary>
            Reserved Command.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.CommandTypes.CmdZWaveSetPromiscuousMode">
            <summary>
            Command to enable/disable the promiscuous mode.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ConnectionStatuses">
            <summary>
            Connection Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ConnectionStatuses.None">
            <summary>
            Initial status of <see cref="T:Zensys.ZWave.Devices.IDevice"></see> connection.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ConnectionStatuses.Opened">
            <summary>
            <see cref="T:Zensys.ZWave.Devices.IDevice"></see> conection established.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ConnectionStatuses.Closed">
            <summary>
            <see cref="T:Zensys.ZWave.Devices.IDevice"></see> connection correctly closed.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ConnectionStatuses.Invalid">
            <summary>
            <see cref="T:Zensys.ZWave.Devices.IDevice"></see> connection lost or invalid.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.Constants">
            <summary>
            Represent a set of constants.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.CALIBRATION_VALUE_SRAM_POS">
            <summary>
            Calibration value position in SRAM buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.CALIBRATION_VALUE_OTP_POS">
            <summary>
            Calibration value position in OTP buffer.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.FIRMWARE_SIZE">
            <summary>
            Firmaware size constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.FIRMWARE_PAGE_SIZE">
            <summary>
            Firmaware page size constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.PAGES_IN_FIRMWARE">
            <summary>
            Firmaware pages count constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.FIRMWARE_ERASE_TIME">
            <summary>
            Firmaware erase max time constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.MAX_SYNC">
            <summary>
            Max sync count constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEPROM_START">
            <summary>
            EEPROM start address constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEP_MAX_CLASSES">
            <summary>
            EEPROM max classes count constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEP_CLASS_START">
            <summary>
            EEPROM classes start address constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEP_BITMASK_LENGTH">
            <summary>
            EEPROM bitmask length constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.SRAM_BLANK_VALUE">
            <summary>
            SRAM blank value constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.SRAM_SIZE">
            <summary>
            SRAM size constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.SRAM_DEVMODE_SIZE">
            <summary>
            Size of the SRAM in Development mode of operation.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.SRAM_DEVMODE_OFFSET">
            <summary>
            Address of part of SRAM for Development mode of operation.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.MTP_BLANK_VALUE">
            <summary>
            MTP blank value constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.MTP_PAGE_SIZE">
            <summary>
            MTP page size constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEPROM_BLANK_VALUE">
            <summary>
            EEPROM blank value constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.EEPROM_PAGE_SIZE">
            <summary>
            EEPROM max page count constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.GET_INIT_DATA_FLAG_SLAVE_API">
            <summary>
            Slave API init data flag constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.GET_INIT_DATA_FLAG_TIMER_SUPPORT">
            <summary>
            Timer support init data flag constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.GET_INIT_DATA_FLAG_SECONDARY_CTRL">
            <summary>
            Secondary controller init data flag constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.GET_INIT_DATA_FLAG_IS_SUC">
            <summary>
            Is SUC init data flag constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.FLASH_SIZE">
            <summary>
            Flash size.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.PAGES_IN_FLASH">
            <summary>
            Flash pages count.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.BYTES_IN_PAGE">
            <summary>
            Max page buffer length.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.BLANK_VALUE">
            <summary>
            Blank value constant.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Constants.SRAM_PAGE_SIZE">
            <summary>
            SRAM page size constant.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ControllerCapabilities">
            <summary>
            Controller Capabilities enumeration
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerCapabilities.IS_SECONDARY">
            <summary>
            Return value mask for ZWaveGetControllerCapabilities
            Controller is secondary on current Z-Wave network
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerCapabilities.ON_OTHER_NETWORK">
            <summary>
            Return value mask for ZWaveGetControllerCapabilities
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerCapabilities.NODEID_SERVER_PRESENT">
            <summary>
            Return value mask for ZWaveGetControllerCapabilities
            Controller is a member of a Z-Wave network with a NodeID Server present
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerCapabilities.IS_REAL_PRIMARY">
            <summary>
            Return value mask for ZWaveGetControllerCapabilities
            Controller is the original owner of the current Z-Wave network HomeID
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerCapabilities.IS_SUC">
            <summary>
            Return value mask for ZWaveGetControllerCapabilities
            Controller is the SUC in current Z-WAve network
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ControllerChangeMode">
            <summary>
            Controller Change Modes enumeration. Modes available for Controller change.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerChangeMode.Start">
            <summary>
            Start Change
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerChangeMode.Stop">
            <summary>
            Stop Change
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerChangeMode.StopFailed">
            <summary>
            Stop Change. Indicate failed
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ControllerRoles">
            <summary>
            Controller Roles enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.SUC">
            <summary>
            SUC role.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.RealPrimary">
            <summary>
            Real Primary role.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.SIS">
            <summary>
            SIS role.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.Secondary">
            <summary>
            Secondary Controller role.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.Inclusion">
            <summary>
            Inclusion Controller role.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.NodeIdServerPresent">
            <summary>
            SIS present flag.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ControllerRoles.OtherNetwork">
            <summary>
            From other network flag.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.EepromSize">
            <summary>
            Eeprom Size enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.EepromSize.EEPROM_CS_SIZE_ZW010x_ZW030x">
            <summary>
            EEPROM size for 100-300 series.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.EepromSize.EEPROM_CS_SIZE_ZW040x">
            <summary>
            External EEPROM size for 400 series.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.EepromSize.EEPROM_CS_MTP_SIZE_ZW040x">
            <summary>
            Internal EEPROM (MTP) size for 400 series.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.FlashProgrammingStates">
            <summary>
            Flash Programming States enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_ERASE">
            <summary>
            Erase flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_PROGRAM">
            <summary>
            Program flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_PROGRAM_PROGRESS">
            <summary>
            Program flash progress.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_READING_PROGRESS">
            <summary>
            Read flash progress.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_VERIFY">
            <summary>
            Verify flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_READING">
            <summary>
            Read flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_VERIFY_OK">
            <summary>
            Verify flash succesful.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_VERIFY_FAIL">
            <summary>
            Verify flash failed.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_SYNC_ERROR">
            <summary>
            Sync flash error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.FLASH_READING_ERROR">
            <summary>
            Read flash error
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.PROG_PORT_OPEN_ERROR">
            <summary>
            Programming port open error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_PROG_DL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_PROGRAM">
            <summary>
            Program EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_PROGRAM_PROGRESS">
            <summary>
            Program EEPROM progress.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_READING">
            <summary>
            Read EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_READING_PROGRESS">
            <summary>
            Read EEPROM progress.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_ZEROFILL">
            <summary>
            Write EEPROM empty data.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.EEPROM_WRITE_ERROR">
            <summary>
            Write EEPROM error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStates.PROG_COM_ERROR">
            <summary>
            Programming communication error.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.FlashProgrammingStatuses">
            <summary>
            Flash Programming Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStatuses.DONE">
            <summary>
            Done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStatuses.SUCCESS">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FlashProgrammingStatuses.FAIL">
            <summary>
            Fail.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ProgrammingStatuses">
            <summary>
            Programming Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.FlashSyncErr">
            <summary>
            Flash sync error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.FlashProgPass">
            <summary>
            Flash program pass.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.FlashProgErr">
            <summary>
            Flash program error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.SRAMWriteErr">
            <summary>
            SRAM write error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.SRAMWritePass">
            <summary>
            SRAM write pass.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.Err">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammingStatuses.Pass">
            <summary>
            Pass.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.WritePageStatuses">
            <summary>
            Write Page Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WritePageStatuses.Failed">
            <summary>
            Write operation failed.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WritePageStatuses.Succeeded">
            <summary>
            Write operation succeeded.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.FrameTypes">
            <summary>
            Frame Types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FrameTypes.Request">
            <summary>
            Request.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.FrameTypes.Response">
            <summary>
            Response.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerFrameInfo.ProgrammerFrameSizeMin">
            <summary>
            Miminum size of Z-Wave Programmer frame.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.LearnMode">
            <summary>
            Learn Mode enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LearnMode.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LearnMode.Started">
            <summary>
            Started.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LearnMode.Done">
            <summary>
            Done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LearnMode.Failed">
            <summary>
            Failed.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LearnMode.Deleted">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.LedStates">
            <summary>
            Led States enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LedStates.ON">
            <summary>
            ON state.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LedStates.OFF">
            <summary>
            OFF state.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.LedTypes">
            <summary>
            Led Types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LedTypes.Pass">
            <summary>
            Pass Led.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LedTypes.Error">
            <summary>
            Error Led.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LedTypes.Busy">
            <summary>
            Busy Led.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.Libraries">
            <summary>
            Libraries enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.NoLib">
            <summary>
            No Library was found. 
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.ControllerStaticLib">
            <summary>
            A Static Controller library was found.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.ControllerPortableLib">
            <summary>
            A Controller library was found.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.SlaveEnhancedLib">
            <summary>
            A Enhanced Slave ibrary was found.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.SlaveLib">
            <summary>
            A Slave library was found.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.InstallerLib">
            <summary>
            An Installer Controller library was found. 
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.SlaveRoutingLib">
            <summary>
            A Routing Slave library was found.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Libraries.ControllerBridgeLib">
            <summary>
            A Bridge Controller library was found.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.LibraryModes">
            <summary>
            Library Modes enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LibraryModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LibraryModes.PcController">
            <summary>
            PC Controller library mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LibraryModes.Programmer">
            <summary>
            Programmer library mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LibraryModes.Bridge">
            <summary>
            Bridge Controller library mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.LibraryModes.Installer">
            <summary>
            Installer Controller library mode.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ManagerStatus">
            <summary>
            Manager Status enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ManagerStatus.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ManagerStatus.Initialized">
            <summary>
            Initialized.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.Mode">
            <summary>
            Mode enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeAny">
            <summary>
            Mode parameters to ZWaveAddNodeToNetwork and ZWaveRemoveNodeFromNetwork  - Add / Remove any node to the network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeController">
            <summary>
            Mode parameters to ZWaveAddNodeToNetwork, ZWaveRemoveNodeFromNetwork, ZWaveCreateNewPrimary, ZWaveControllerChange - Add a controller to the network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeSlave">
            <summary>
            Mode parameters to ZWaveAddNodeToNetwork ,ZWaveRemoveNodeFromNetwork- Add/Remove a slave node to/from the network.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeExisting">
            <summary>
            Mode parameters to ZWaveAddNodeToNetwork and ZWaveRemoveNodeFromNetwork.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeStop">
             <summary>
            Stop learn mode without reporting an error.ZWaveAddNodeToNetwork, ZWaveRemoveNodeFromNetwork and ZWaveCreateNewPrimary.
             </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeStopFailed">
            <summary>
            Mode parameters to ZWaveAddNodeToNetwork, ZWaveCreateNewPrimary.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeOptionNetworkWide">
            <summary>
            Mode option bit to ZWaveAddNodeToNetwork - Network Wide Inclusion
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.Mode.NodeOptionHighPower">
            <summary>
            Mode option bit to ZWaveAddNodeToNetwork - High power inclusion
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.NodeStatuses">
            <summary>
            Node Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.Unknown">
            <summary>
            Unknow
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.LearnReady">
            <summary>
            Learn Ready status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.NodeFound">
            <summary>
            Node was found status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.AddingRemovingSlave">
            <summary>
            Adding/Removing slave status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.AddingRemovingController">
            <summary>
            Adding/Removing controller status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.ProtocolDone">
            <summary>
            Protocol done status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.Done">
            <summary>
            Done status.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.NodeStatuses.Failed">
            <summary>
            Failed status.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ProgrammerCommandTypes">
            <summary>
            Programmer Command Types enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_BLOCK_SET_EEP">
            <summary>
            Commant to write a specific value to block of EEPROM address.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW_GET_VERSION">
            <summary>
            Command to get the firmware’s version number.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MEMORY_GET_ID">
            <summary>
            Command to read Home Id from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MEMORY_GET_BYTE">
            <summary>
            Command to read a byte from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MEMORY_PUT_BYTE">
            <summary>
            Command to write a byte from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MEMORY_GET_BUFFER">
            <summary>
            Command to read data bytes from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MEMORY_PUT_BUFFER">
            <summary>
            Command to write data bytes from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_STORE_HOMEID">
            <summary>
            Command to write Home Id to the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_CHIP_ERASE">
            <summary>
            Command to erase the Atmel Flash (from 0x00000 to 0x1EFFF).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_BLOCK_SIZE">
            <summary>
            (Not implemented).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_BLOCK_WRITE">
            <summary>
            Command to write block of data bytes to the Atmel Flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_BLOCK_READ">
            <summary>
            Command to read block of data bytes to the Atmel Flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_LOCKBITS">
            <summary>
            (Not implemented).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_FUSEBITS_LOW">
            <summary>
            (Not implemented).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_FUSEBITS_HIGH">
            <summary>
            (Not implemented).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_FUSEBITS_EXT">
            <summary>
            (Not implemented).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_EXIT_PROG_MODE">
            <summary>
            Command to exit from the boot loader mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_CONNECT_PROGRAMMER">
            <summary>
            Command to enter to the programmer mode (For now it is used only to detect the presence of the HW).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_GET_SW_VER">
            <summary>
            Command to get the boot loader SE version <see cref="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW_GET_VERSION"/>.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_M128_ENTER_PROG_MODE">
            <summary>
            Command to enter to the boot loader mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_PROG_ENABLE">
            <summary>
            Command to enable the Flash programming interface.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_CHIP_ERASE">
            <summary>
            Command to erase the ZW0x0x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_READ_PAGE">
            <summary>
            Command to read a ZW0x0 Flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_WRITE_PAGE">
            <summary>
            Command to write a ZW0x0 Flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_READ_LOCKBITS">
            <summary>
            Command to read the ZW0x0x Flash lock bits setting.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_WRITE_LOCKBITS">
            <summary>
            Command to write the ZW0x0x Flash lock bits setting.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_SET_WRITE_CYCLE">
            <summary>
            Command to set the Flash write cycle.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_READ_SIG_BYTE">
            <summary>
            Command to read ZW0x0x Flash signature byte.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_PROG_RELEASE">
            <summary>
            Command to release the ZW0x0x Flash programming interface (ZW0x0x will run in normal mode).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_SET_RF_OPT">
            <summary>
            Command to write the Z-Wave RF setting to the RF option Flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_GET_RF_OPT">
            <summary>
            Command to read the Z-Wave RF setting to the RF option Flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_TOGGLE_EEPROM_IF">
            <summary>
            Command to enable/disable the interface used to Write/Read from the EEPROM.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_ERASE_PAGE">
            <summary>
            Command to erase a ZW0x0x Flash page
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_PROGRAMMER_SET_LED">
            <summary>
            Command to turn on/off the programmer status Leds.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW5XX_WRITE_LOCKBIT">
            <summary>
            Command to write the ZW0x0x Flash lock bits setting.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW5XX_READ_LOCKBIT">
            <summary>
            Command to read the ZW0x0x Flash lock bits setting.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_SRAM_READ_PAGE">
            <summary>
            Command to read a ZW040x SRAM page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_SRAM_WRITE_PAGE">
            <summary>
            Command to write a ZW040x SRAM page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_SRAM_EXECUTE">
            <summary>
            Command to enable execute out of SRAM mode on the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_MODEM_BIT_WRITE">
            <summary>
            Command to set modem bit on the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_STATUS_READ">
            <summary>
            Command to read status from the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_DEV_MODE_ENABLE">
            <summary>
            Command to enable Development mode on the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_CRC_CHECK_RUN">
            <summary>
            Command to check CRC on the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_CHECK_STATE">
            <summary>
            Command to check state on the ZW050x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_BUTTON_PRESSED">
            <summary>
            Push button was pressen on Programmer PCB.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_TOGGLE_MTP_IF">
            <summary>
            MTP Interface toggle.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MTP_FILL">
            <summary>
            MTP fill by value.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MTP_READ_PAGE">
            <summary>
            MTP page read.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_MTP_WRITE_PAGE">
            <summary>
            MTP page write.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_ZW0x0x_WRITE_OTP_STATS_READ">
            <summary>
            Command to read write OTP stats from the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_CALIBRATION_START">
            <summary>
            Command to start calibration the ZW040x chip.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ProgrammerCommandTypes.FUNC_ID_CALIBRATION_STOP">
            <summary>
            Command to stop calibration the ZW040x chip.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses">
            <summary>
            Statuses of ZW_RequestNetWorkUpdate command.
            #define ZW_SUC_UPDATE_DONE      0x00
            #define ZW_SUC_UPDATE_ABORT     0x01
            #define ZW_SUC_UPDATE_WAIT      0x02
            #define ZW_SUC_UPDATE_DISABLED  0x03
            #define ZW_SUC_UPDATE_OVERFLOW  0x04
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses.SucUpdateDone">
            <summary>
            The update process succeeded.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses.SucUpdateAbort">
            <summary>
            The update process aborted because of an error.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses.SucUpdateWait">
            <summary>
            The SUC node is busy.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses.SucUpdateDisabled">
            <summary>
            The SUC functionality is disabled.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.RequestNetworkUpdateStatuses.SucUpdateOverflow">
            <summary>
            The controller requested an update after more than 64 changes have occurred in the network. The update information is
            then out of date in respect to that controller. In this situation the controllerhave to make a replication before trying
            to request any new network updates.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.SetSucReturnValue">
            <summary>
            ZWaveSetSUCReturnValue
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SetSucReturnValue.SucUndefined">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SetSucReturnValue.SucSetSucceeded">
            <summary>
            ZWaveSUC_SET_SUCCEEDED
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SetSucReturnValue.SucSetFailed">
            <summary>
            ZWaveSUC_SET_FAILED
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.SlaveLearnMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SlaveLearnMode.VirtualSlaveLearnModeDisable">
            <summary>
            Disable SlaveLearnMode (disable possibility to add/remove Virtual Slave nodes)
            Allowed when bridge is a primary controller, an inclusion controller or a
            secondary controller
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SlaveLearnMode.VirtualSlaveLearnModeEnable">
            <summary>
            Enable SlaveLearnMode - Enable possibility for including/excluding a Virtual
            Slave node by an external primary/inclusion controller Allowed when bridge
            is an inclusion controller or a secondary controller
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SlaveLearnMode.VirtualSlaveLearnModeAdd">
            <summary>
            Add new Virtual Slave node if possible Allowed when bridge is a primary or
            an inclusion controller Slave Learn function done when Callback function
            returns ASSIGN_NODEID_DONE
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SlaveLearnMode.VirtualSlaveLearnModeRemove">
            <summary>
            Remove existing Virtual Slave node Allowed when bridge is a primary or an
            inclusion controller Slave Learn function done when Callback function returns
            ASSIGN_NODEID_DONE
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.SleepMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SleepMode.ZW_STOP_MODE">
            <summary>
            ZW_STOP_MODE
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.SleepMode.ZW_WUT_MODE">
            <summary>
            ZW_WUT_MODE
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.ZW040xProgrammingState">
            <summary>
            ZW040x Programming State byte enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.CrcBusy">
            <summary>
            This bit will go high when a ‘Run CRC Check’
            command has been sent to the Single Chip. It will
            return to low when the CRC check procedure is done.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.CrcDone">
            <summary>
            This bit is cleared when a ‘Run CRC Check’
            command is issued and it will be set if the CRC check
            procedure passes.
            </summary>  
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.CrcFailed">
            <summary>
            This bit is cleared when a ‘Run CRC Check’
            command is issued and it will be set if the CRC check
            procedure fails.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.WriteOperationBusy">
            <summary>
            This bit is high if the OTP programming logic is busy
            programming the OTP.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.WriteOperationFailed">
            <summary>
            This bit is cleared when a ‘Write OTP’ command is
            issued and it will be set if the OTP write operation
            fails.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.ContOperationRefused">
            <summary>
            This bit will be set if either a ‘Continue Write
            Operation’ or a Continue Read Operation’ are
            refused. These operations will be refused if:
            A ‘Continue Write Operation’ is not succeeding a
            ‘Write SRAM’ or a ‘Continue Write Operation’
            command
            A ‘Continue Read Operation’ is not succeeding a
            ‘Read OTP’, a ‘Read SRAM’ or a ‘Continue Read
            Operation’ command
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.DevelopmentModeEnabled">
            <summary>
            This bit is set if the ‘Development Mode’ has been enabled
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.ZW040xProgrammingState.ExecSramModeEnabled">
            <summary>
            This bit is set if the ‘Execute out of SRAM’ Mode has been enabled
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.TransmitStatuses">
            <summary>
            Transmit Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.CompleteOk">
            <summary>
            Successfully
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.CompleteNoAcknowledge">
            <summary>
            No acknowledge is received before timeout from the destination node. 
            Acknowledge is discarded in case it is received after the timeout.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.CompleteFail">
            <summary>
            Not possible to transmit data because the Z-Wave network is busy (jammed).
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.CompleteNoRoute">
            <summary>
            No route found in Assign Route.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.NoAcknowledge">
            <summary>
            No Communication ACK received.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.TransmitStatuses.ResMissing">
            <summary>
            No response received.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.WorkingModes">
            <summary>
            Working Modes enumeration. Used only for 400 series.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WorkingModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WorkingModes.Normal">
            <summary>
            Normal mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WorkingModes.Development">
            <summary>
            Development mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WorkingModes.ExecuteOutOfSram">
            <summary>
            Execute Out Of SRAM mode.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WorkingModes.Programming">
            <summary>
            Programming mode.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Enums.WriteRfOptionsStatuses">
            <summary>
            Write RF Options Statuses enumeration.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.NoErrors">
            <summary>
            No Errors.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.CantWriteAppRfSettings">
            <summary>
            Cannot write Application RF settings to flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.CantReadAppRfSettings">
            <summary>
            Cannot read Application RF settings from flash.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.CantWriteGeneralRfSettings">
            <summary>
            Cannot write general RF settings to flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.CantReadGeneralRfSettings">
            <summary>
            Cannot read general RF settings from flash page.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.RfFrequencyNotSelected">
            <summary>
            RF frequency is not selected.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.UndefinedRfSettings">
            <summary>
            Undefined RF settings.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Enums.WriteRfOptionsStatuses.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandler_BridgeEvent"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.#ctor(System.Byte[],System.Byte,System.Byte[],System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs"/> class.
            </summary>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="destNodeIds">The dest node ids.</param>
            <param name="commandClassKey">The command class key.</param>
            <param name="commandKey">The command key.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.CommandBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.SourceNodeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.DestNodeIds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.CommandClassKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventArgs.CommandKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.LearnModeStatusChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.LearnModeStatusChangedEventArgs.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.LearnModeStatusChangedEventArgs.SourceNodeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.LearnModeStatusChangedEventArgs.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.LearnModeStatusChangedEventArgs.Status">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.FailedNodeStatusChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FailedNodeStatusChangedEventArgs.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FailedNodeStatusChangedEventArgs.SourceNodeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FailedNodeStatusChangedEventArgs.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FailedNodeStatusChangedEventArgs.Status">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FailedNodeStatusChangedEventArgs.ReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.NodeStatusChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandlerEvent"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.NodeStatusChangedEventArgs.#ctor(System.Byte[],System.Byte,Zensys.ZWave.Enums.CommandTypes,Zensys.ZWave.Enums.NodeStatuses,Zensys.ZWave.Devices.IDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs"/> class.
            </summary>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="commandType">Type of the command.</param>
            <param name="status">The status.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.NodeStatusChangedEventArgs.DeviceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.NodeStatusChangedEventArgs.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.NodeStatusChangedEventArgs.SourceNodeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.NodeStatusChangedEventArgs.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.NodeStatusChangedEventArgs.Status">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.NodeStatusChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandlerEvent"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.#ctor(System.Byte[],System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs"/> class.
            </summary>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="commandClassKey">The command class key.</param>
            <param name="commandKey">The command key.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.IsBroadcast">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.CommandBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.SourceNodeId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.CommandClassKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.DeviceAppCommandHandlerEventArgs.CommandKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DeviceAppCommandHandlerEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandlerEvent"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DeviceAppCommandHandler_BridgeEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.Devices.IDevice.ApplicationCommandHandler_BridgeEvent"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ExceptionReceivedEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.IFrameLayer.ExceptionReceived"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.ExceptionReceivedEventArgs.#ctor(System.Byte[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.ExceptionReceivedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.ExceptionReceivedEventArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.ExceptionReceivedEventArgs.InnerException">
            <summary>
            The InnerException.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ExceptionReceivedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.IFrameLayer.ExceptionReceived"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DataReceivedEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.ITransportLayer.DataReceived"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.DataReceivedEventArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.DataReceivedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.DataReceivedEventArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.DataReceivedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.ITransportLayer.DataReceived"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.FrameReceivedEventArgs">
            <summary>
            Provides data for  <see cref="E:Zensys.ZWave.IFrameLayer.FrameReceived"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.FrameReceivedEventArgs.#ctor(System.Byte[],System.Boolean,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.FrameReceivedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="isAck">if set to <c>true</c> is acknoledgement.</param>
            <param name="commandType">Tthe command type.</param>
            <param name="frameBuffer">The frame buffer.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.FrameReceivedEventArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FrameReceivedEventArgs.IsACK">
            <summary>
            Is acknoledgement.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FrameReceivedEventArgs.CommandType">
            <summary>
            Command type.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.FrameReceivedEventArgs.FrameBuffer">
            <summary>
            Frame buffer.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.FrameReceivedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.IFrameLayer.FrameReceived"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ProgressChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IDeviceFlash.ProgressChanged"/> or <see cref="E:Zensys.ZWave.Devices.IDeviceMemory.ProgressChanged"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.ProgressChangedEventArgs.#ctor(Zensys.ZWave.Enums.ProgressStatuses,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.ProgressChangedEventArgs"/> class.
            </summary>
            <param name="prevValue">The current value.</param>
            <param name="newValue">The total value.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.ProgressChangedEventArgs.mProgressStatus">
            <summary>
            Gets or sets the current progress status.
            </summary>
            <value>The current progress status.</value>
        </member>
        <member name="P:Zensys.ZWave.Events.ProgressChangedEventArgs.Current">
            <summary>
            Gets or sets the current progress value.
            </summary>
            <value>The current progress value.</value>
        </member>
        <member name="P:Zensys.ZWave.Events.ProgressChangedEventArgs.Total">
            <summary>
            Gets or sets the total progress value.
            </summary>
            <value>The current total value.</value>
        </member>
        <member name="T:Zensys.ZWave.Events.ProgressChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ResponseReceivedEventArgs">
            <summary>
            Provides data for <see cref="P:Zensys.ZWave.ISessionLayer.ResponseReceived"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.ResponseReceivedEventArgs.#ctor(System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.ResponseReceivedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="commandType">The command type.</param>
            <param name="frameBuffer">The frame buffer.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.ResponseReceivedEventArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.ResponseReceivedEventArgs.CommandType">
            <summary>
            Command type.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.ResponseReceivedEventArgs.FrameBuffer">
            <summary>
            Frame buffer.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ResponseReceivedEventHandler">
            <summary>
            Represents the method that handles a <see cref="P:Zensys.ZWave.ISessionLayer.ResponseReceived"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.StatusChangedArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IDevice.ConnectionStatusChanged"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.StatusChangedArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.StatusChangedArgs"/> class.
            </summary>
            <param name="prevValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Zensys.ZWave.Events.StatusChangedArgs.PrevStatusValue">
            <summary>
            Gets or sets the previous status value.
            </summary>
            <value>The previous status value.</value>
        </member>
        <member name="P:Zensys.ZWave.Events.StatusChangedArgs.NewStatusValue">
            <summary>
            Gets or sets the new status value.
            </summary>
            <value>The new status value.</value>
        </member>
        <member name="T:Zensys.ZWave.Events.StatusChangedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.Devices.IDevice.ConnectionStatusChanged"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.UnsolititedFrameReceivedArgs">
            <summary>
            Provides data for <see cref="E:Zensys.ZWave.Devices.IController.UnsolititedFrameReceived"/> event.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.UnsolititedFrameReceivedArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.UnsolititedFrameReceivedArgs"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.UnsolititedFrameReceivedArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.UnsolititedFrameReceivedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Zensys.ZWave.Devices.IController.UnsolititedFrameReceived"/> event.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ControllerUpdatedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Events.ControllerUpdatedEventArgs.#ctor(Zensys.ZWave.Devices.IDeviceInfo,Zensys.ZWave.Enums.ApplicationControllerUpdateStatuses)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Events.ControllerUpdatedEventArgs"/> class.
            </summary>
            <param name="changedNode">The changed node.</param>
            <param name="status">The status.</param>
        </member>
        <member name="F:Zensys.ZWave.Events.ControllerUpdatedEventArgs.ChangedNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Events.ControllerUpdatedEventArgs.ChangedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Events.ControllerUpdatedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.ApplicationLayerException">
            <summary>
            The exception that is thrown when a error occured in <see cref="T:Zensys.ZWave.IApplicationLayer"></see>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.ApplicationLayerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.ApplicationLayerException"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.ApplicationLayerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.ApplicationLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.ApplicationLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.ApplicationLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.FrameLayerException">
            <summary>
            The exception that is thrown when a error occured in <see cref="T:Zensys.ZWave.IFrameLayer"></see>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.FrameLayerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.FrameLayerException"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.FrameLayerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.FrameLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.FrameLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.FrameLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.InvalidResponseSerialApiException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.NotSupportedCommandSerialApiException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.RequestTimeoutException">
            <summary>
            The exception that is thrown when the time allotted for a reauest has expired.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.RequestTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.RequestTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.RequestTimeoutException"/> class.
            </summary>
            <param name="describe">The describe.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.RequestTimeoutException"/> class.
            </summary>
            <param name="describe">The describe.</param>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.RuntimeConfigurationException">
            <summary>
            The exception that is thrown when the run-time configuration is not valid.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.SessionLayerException">
            <summary>
            The exception that is thrown when a error occured in <see cref="T:Zensys.ZWave.ISessionLayer"></see>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.SessionLayerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.SessionLayerException"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.SessionLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.SessionLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.SessionLayerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.SessionLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
        </member>
        <member name="T:Zensys.ZWave.Exceptions.TransportLayerException">
            <summary>
            The exception that is thrown when a error occured in <see cref="T:Zensys.ZWave.ITransportLayer"></see>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.TransportLayerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.TransportLayerException"/> class.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.TransportLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.TransportLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Zensys.ZWave.Exceptions.TransportLayerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Exceptions.TransportLayerException"/> class.
            </summary>
            <param name="describe">The describe.</param>
        </member>
        <member name="T:Zensys.ZWave.IApplicationLayer">
            <summary>
            Provides the features required to support scenarios when creating Z-Wave Device classes.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.Init(Zensys.ZWave.ISessionLayer,System.Boolean)">
            <summary>
            Inits instance with the specified session layer.
            </summary>
            <param name="sessionLayer">The session layer.</param>
            <param name="useExternalCommandClassesStorage">if set to <c>true</c> [use external command classes storage].</param>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateController">
            <summary>
            Creates the Controller Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateController(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Controller Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateBridgeController">
            <summary>
            Creates the Bridge Controller Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateBridgeController(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Bridge Controller Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateDevice">
            <summary>
            Creates the Generic Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateDevice(Zensys.ZWave.Devices.IDeviceInfo)">
            <summary>
            Creates the device.
            </summary>
            <param name="deviceInfo">The device info.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateEnhancedSlave">
            <summary>
            Creates the Enhanced Slave Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateEnhancedSlave(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Enhanced Slave Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateInstallerController">
            <summary>
            Creates the Installer Controller Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateInstallerController(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Installer Controller Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateRoutingSlave">
            <summary>
            Creates the Routing Slave Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateRoutingSlave(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Routing Slave Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateSlave">
            <summary>
            Creates the Slave Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateSlave(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Slave Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateStaticUpdateController">
            <summary>
            Creates the Static Update Controller Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateStaticUpdateController(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Static Update Controller Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateZensorNetRoutingSlave">
            <summary>
            Creates the Zensor Net Routing Slave Device class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateZensorNetRoutingSlave(Zensys.ZWave.Devices.VersionInfo,System.String)">
            <summary>
            Creates the Zensor Net Routing Slave Device class.
            </summary>
            <param name="version">The version.</param>
            <param name="serialPortName">Name of the serial port.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IApplicationLayer.CreateFlashSettings">
            <summary>
            Creates the Flash Settings class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zensys.ZWave.IApplicationLayer.UseExternalCommandClassesStorage">
            <summary>
            Gets or sets a value indicating whether [use external command classes storage].
            </summary>
            <value>
            	<c>true</c> if [use external command classes storage]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zensys.ZWave.IDataFrame">
            <summary>
            Provides the features required to manipulate frame data.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.IDataFrame.AddPayload(System.Byte[])">
            <summary>
            Adds the payload.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IDataFrame.AddPayload(System.Byte)">
            <summary>
            Adds the payload.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IDataFrame.GetPayload">
            <summary>
            Gets payload (parameters)
            </summary>
            <returns>The payload</returns>
        </member>
        <member name="M:Zensys.ZWave.IDataFrame.GetFrameBuffer">
            <summary>
            Gets the frame buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zensys.ZWave.IDataFrame.Command">
            <summary>
            Gets or sets the Serial API Command Key.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Zensys.ZWave.IDataFrame.Type">
            <summary>
            Gets or sets the Frame Type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Zensys.ZWave.IFrameLayer">
            <summary>
            Provides the features required to support Data Frame manipulation.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.Init(Zensys.ZWave.ITransportLayer,System.ComponentModel.BindingList{Zensys.ZWave.Logging.LogPacket})">
            <summary>
            Inits the instance with the specified Transport layer.
            </summary>
            <param name="transportLayer">The transport layer.</param>
            <param name="logDataSource">The log data source.</param>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.Write(Zensys.ZWave.IDataFrame)">
            <summary>
            Writes the specified frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.Open(System.String)">
            <summary>
            Opens the specified port name.
            </summary>
            <param name="portName">Name of the port.</param>
        </member>
        <member name="M:Zensys.ZWave.IFrameLayer.CreateDataFrame(Zensys.ZWave.Enums.FrameTypes,System.Byte,System.Byte[])">
            <summary>
            Creates the data frame.
            </summary>
            <param name="frameType">Type of the frame.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="E:Zensys.ZWave.IFrameLayer.ExceptionReceived">
            <summary>
            Represents the method that will handle the exception received event.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.IFrameLayer.AcknowledgeReceived">
            <summary>
            Represents the method that will handle the acknowledge received event.
            </summary>
        </member>
        <member name="E:Zensys.ZWave.IFrameLayer.FrameReceived">
            <summary>
            Represents the method that will handle the frame received event.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.IFrameLayer.RetransmissionQueueLocked">
            <summary>
            Gets or sets a value indicating whether [retransmission queue locked].
            </summary>
            <value>
            	<c>true</c> if [retransmission queue locked]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zensys.ZWave.ISessionLayer">
            <summary>
            Provides the features required to support communication sessions.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.Init(Zensys.ZWave.IFrameLayer,System.ComponentModel.BindingList{Zensys.ZWave.Logging.LogPacket})">
            <summary>
            Inits the instance with the specified frame layer.
            </summary>
            <param name="frameLayer">The frame layer.</param>
            <param name="logDataSource">The log data source.</param>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteNonRequest(System.Byte[])">
            <summary>
            Executes the non request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteNonRequest(System.Byte,System.Byte[])">
            <summary>
            Executes the non request.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.Open(System.String)">
            <summary>
            Opens the specified port name.
            </summary>
            <param name="portName">Name of the port.</param>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteRequest(System.Byte,System.Byte[])">
            <summary>
            Sends the request.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteRequest(System.Byte[])">
            <summary>
            Executes the request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteRequest(System.Byte,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Executes the request.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="responseCount">The responses count.</param>
            <param name="timeout">The timeout.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.ISessionLayer.ExecuteRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Executes the request.
            </summary>
            <param name="request">The request.</param>
            <param name="responseCount">The responses count.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.ResponseReceived">
            <summary>
            Represents the method that will handle the response received event.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.AcknowledgeReceived">
            <summary>
            Represents the method that will handle the ack received event.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.RequestTimeout">
            <summary>
            Gets or sets the request timeout.
            </summary>
            <value>The request timeout.</value>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.LogDataSource">
            <summary>
            Gets the log data source.
            </summary>
            <value>The log data source.</value>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.IsAutoIncrementSequenceNumber">
            <summary>
            Gets or sets a value indicating whether this instance is auto increment sequence number.
            </summary>
            <value>
            	<c>true</c> if this instance is auto increment sequence number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.ISessionLayer.IsReady">
            <summary>
            Gets a value indicating whether this instance is ready.
            </summary>
            <value><c>true</c> if this instance is ready; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Zensys.ZWave.ITransportLayer">
            <summary>
            Provides the features required to support communication with connected Z-Wave Device.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ITransportLayer.Open(System.String)">
            <summary>
            Opens the specified communication interface.
            </summary>
            <param name="deviceName">Name of the device (communication interface).</param>
        </member>
        <member name="M:Zensys.ZWave.ITransportLayer.Close">
            <summary>
            Closes the opened communication interface.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ITransportLayer.Write(System.Byte[])">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Zensys.ZWave.ITransportLayer.IsOpen">
            <summary>
            Determines whether communication interface is open.
            </summary>
            <returns>
            	<c>true</c> if communication interface is open; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zensys.ZWave.ITransportLayer.GetDeviceNames">
            <summary>
            Gets the installed communication interfaces names.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Zensys.ZWave.ITransportLayer.DataReceived">
            <summary>
            Occurs when Data received.
            </summary>
        </member>
        <member name="T:Zensys.ZWave.Logging.LogPacket">
            <summary>
            Represents a log packet item in the <see cref="!:LogSession.Packets"/>.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Logging.LogPacket.#ctor(System.Byte[],System.Boolean,System.Boolean,System.DateTime,System.Byte,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.Logging.LogPacket"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="isPut">if set to <c>true</c> [is put].</param>
            <param name="isRequest">if set to <c>true</c> [is request].</param>
            <param name="time">The time.</param>
            <param name="applicationByte">The application byte.</param>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.Payload">
            <summary>
            Gets the payload.
            </summary>
            <value>The payload.</value>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.IsPut">
            <summary>
            Gets a value indicating whether this instance is for put.
            </summary>
            <value><c>true</c> if this instance is for put; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.IsRequest">
            <summary>
            Gets or sets a value indicating whether this instance is request.
            </summary>
            <value>
            	<c>true</c> if this instance is request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.Time">
            <summary>
            Gets the date time string.
            </summary>
            <value>The date time string.</value>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.ApplicationString">
            <summary>
            Gets or sets the application string.
            </summary>
            <value>The application string.</value>
        </member>
        <member name="P:Zensys.ZWave.Logging.LogPacket.ParameterString">
            <summary>
            Gets or sets the parameters string.
            </summary>
            <value>The parameters string.</value>
        </member>
        <member name="T:Zensys.ZWave.Logging.ThreadedBindingList`1">
            <summary>
            Provides a generic collection that supports data binding. Used on UI thread
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.AddNewCore">
            <summary>
            Adds a new item to the end of the collection.
            </summary>
            <returns>
            The item that was added to the collection.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The new item is not the same type as the objects contained in the <see cref="T:System.ComponentModel.BindingList`1"/>.
            </exception>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
            <param name="index">The zero-based index where the item is to be inserted.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">
            You are removing a newly added item and <see cref="P:System.ComponentModel.IBindingList.AllowRemove"/> is set to false.
            </exception>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to replace.</param>
            <param name="item">The new value for the item at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.CancelNew(System.Int32)">
            <summary>
            Discards a pending new item.
            </summary>
            <param name="itemIndex">The index of the of the new item to be added</param>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.EndNew(System.Int32)">
            <summary>
            Commits a pending new item to the collection.
            </summary>
            <param name="itemIndex">The index of the new item to be added.</param>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items if overridden in a derived class; otherwise, throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="prop">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that specifies the property to sort on.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/>  values.</param>
            <exception cref="T:System.NotSupportedException">
            Method is not overridden in a derived class.
            </exception>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.RemoveSortCore">
            <summary>
            Removes any sort applied with <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/> if sorting is implemented in a derived class; otherwise, raises <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Method is not overridden in a derived class.
            </exception>
        </member>
        <member name="M:Zensys.ZWave.Logging.ThreadedBindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search for.</param>
            <param name="key">The value of <paramref name="property"/> to match.</param>
            <returns>
            The zero-based index of the item that matches the property descriptor and contains the specified value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)"/> is not overridden in a derived class.
            </exception>
        </member>
        <member name="P:Zensys.ZWave.Logging.ThreadedBindingList`1.IsAsyncModel">
            <summary>
            Gets or sets a value indicating whether this instance is async model.
            </summary>
            <value>
            	<c>true</c> if this instance is async model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Logging.ThreadedBindingList`1.IsQueuedModel">
            <summary>
            Gets or sets a value indicating whether this instance is queued model.
            </summary>
            <value>
            	<c>true</c> if this instance is queued model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zensys.ZWave.Logging.ThreadedBindingList`1.Ctx">
            <summary>
            Sets the SynchronizationContext.
            </summary>
            <value>The SynchronizationContext.</value>
        </member>
        <member name="P:Zensys.ZWave.Logging.ThreadedBindingList`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </returns>
        </member>
        <member name="T:Zensys.ZWave.Runtime.RuntimeManager">
            <summary>
            Provides a run-time initialization methods.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.Runtime.RuntimeManager.LoadAssemblies(Zensys.ZWave.ZWaveManager,System.String)">
            <summary>
            homeos-local: this function did not exist
            </summary>
            <param name="zWaveManager">The <see cref="T:Zensys.ZWave.ZWaveManager"/>.</param>
        </member>
        <member name="M:Zensys.ZWave.Runtime.RuntimeManager.LoadAssemblies(Zensys.ZWave.ZWaveManager)">
            <summary>
            Loads the assemblies.
            </summary>
            <param name="zWaveManager">The <see cref="T:Zensys.ZWave.ZWaveManager"/>.</param>
        </member>
        <member name="M:Zensys.ZWave.Runtime.RuntimeManager.LoadAssembly(Zensys.ZWave.ZWaveManager,Zensys.ZWave.Runtime.RuntimeManager.Layers,System.String,System.String)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="zWaveManager">The <see cref="T:Zensys.ZWave.ZWaveManager"/>.</param>
            <param name="layer">The layer name <see cref="T:Zensys.ZWave.Runtime.RuntimeManager.Layers"/>.</param>
            <param name="layerDllName">Name of the layer DLL.</param>
            <param name="layerInstanceName">Name of the layer instance.</param>
        </member>
        <member name="T:Zensys.ZWave.Runtime.RuntimeManager.Layers">
            <summary>
            Layers names.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Runtime.RuntimeManager.Layers.ApplicationLayer">
            <summary>
            ApplicationLayer
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Runtime.RuntimeManager.Layers.TransportLayer">
            <summary>
            TransportLayer
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Runtime.RuntimeManager.Layers.SessionLayer">
            <summary>
            SessionLayer
            </summary>
        </member>
        <member name="F:Zensys.ZWave.Runtime.RuntimeManager.Layers.FrameLayer">
            <summary>
            FrameLayer
            </summary>
        </member>
        <member name="T:Zensys.ZWave.ZWaveManager">
            <summary>
            Represents a <b>ZWaveManager</b> that manage all layers.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ZWaveManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zensys.ZWave.ZWaveManager"/> class.
            </summary>
        </member>
        <member name="F:Zensys.ZWave.ZWaveManager.LibraryMode">
            <summary>
            Get or sets Library Mode.
            </summary>
        </member>
        <member name="M:Zensys.ZWave.ZWaveManager.Init(Zensys.ZWave.Enums.LibraryModes,System.Boolean)">
            <summary>
            Inits this instance.
            </summary>
            <param name="mode">The library mode.</param>
        </member>
        <member name="M:Zensys.ZWave.ZWaveManager.Init(Zensys.ZWave.Enums.LibraryModes,System.Boolean,System.String)">
            <summary>
            homeos-local: this function did not exist
            </summary>
            <param name="mode">The library mode.</param>
        </member>
        <member name="M:Zensys.ZWave.ZWaveManager.Init(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Zensys.ZWave.Enums.LibraryModes,System.Boolean)">
            <summary>
            Inits the specified application layer DLL name.
            </summary>
            <param name="applicationLayerDllName">Name of the application layer DLL.</param>
            <param name="applicationLayerInstanceName">Name of the application layer instance.</param>
            <param name="transportLayerDllName">Name of the transport layer DLL.</param>
            <param name="transportLayerInstanceName">Name of the transport layer instance.</param>
            <param name="sessionLayerDllName">Name of the session layer DLL.</param>
            <param name="sessionLayerInstanceName">Name of the session layer instance.</param>
            <param name="frameLayerDllName">Name of the frame layer DLL.</param>
            <param name="frameLayerInstanceName">Name of the frame layer instance.</param>
            <param name="mode">The library mode. See <see cref="T:Zensys.ZWave.Enums.LibraryModes"/></param>
        </member>
        <member name="M:Zensys.ZWave.ZWaveManager.ChangeLayer(Zensys.ZWave.Runtime.RuntimeManager.Layers,System.String,System.String)">
            <summary>
            Changes the layer.
            </summary>
            <param name="layer">The layer.</param>
            <param name="layerDllName">Name of the layer DLL.</param>
            <param name="layerInstanceName">Name of the layer instance.</param>
        </member>
        <member name="E:Zensys.ZWave.ZWaveManager.StatusChanged">
            <summary>
            Represents the method that will handle the status changed event.
            </summary>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.ApplicationLayer">
            <summary>
            Gets or sets the application layer.
            </summary>
            <value>The application layer.</value>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.FrameLayer">
            <summary>
            Gets or sets the frame layer.
            </summary>
            <value>The frame layer.</value>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.SessionLayer">
            <summary>
            Gets or sets the session layer.
            </summary>
            <value>The session layer.</value>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.TransportLayer">
            <summary>
            Gets or sets the transport layer.
            </summary>
            <value>The transport layer.</value>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Zensys.ZWave.ZWaveManager.LogDataSource">
            <summary>
            Gets the log data source.
            </summary>
            <value>The log data source.</value>
        </member>
    </members>
</doc>
